//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.examples.todolist;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.examples.todolist";
option java_package = "io.spine.examples.todolist.c.events";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";

import "spine/change/change.proto";

import "todolist/identifiers.proto";
import "todolist/values.proto";
import "todolist/changes.proto";
import "todolist/attributes.proto";

// An event signalizing about the successful task creation.
//
// It is fired in the cases as follows:
//
//      * a task is created using the "Quick" creation mode;
//      * a task, initilally in the draft state, is finalized.
//
// The task referenced by the event is always finalized.
// The task referenced by the event is neither completed nor deleted.
//
message TaskCreated {

    // An identifier of the created task.
    TaskId id = 1;

    // Details of the created task.
    TaskDetails details = 2;

    // Reserved for future extension.
    reserved 3 to 10;
}

// An event signalizing about the task draft creation.
//
// The task referenced by the event is always in a draft state.
// The task referenced by the event is neither completed nor deleted.
//
message TaskDraftCreated {

    // An identifier of the created task draft.
    TaskId id = 1;

    // Details of the created task draft.
    TaskDetails details = 2;

    // The draft creation time.
    //
    // May be used to filter the stale drafts.
    google.protobuf.Timestamp draft_creation_time = 3 [(required) = true];

    // Reserved for future extension.
    reserved 4 to 10;
}

// An event fired upon a task description update.
//
// The task referenced by the event may be either in a finalized or in a draft state.
//
message TaskDescriptionUpdated {

    // An identifier of the updated task.
    TaskId task_id = 1;

    // The change of the task description.
    change.StringChange description_change = 2 [(valid) = true];

    // Reserved for future extension.
    //
    // For instance, to mark the start and end positions of the text changed (useful for
    // huge task descriptions).
    reserved 3 to 10;
}

// An event fired upon a task priority update.
//
// The task referenced by the event may be either in a finalized or in a draft state.
//
message TaskPriorityUpdated {

    // An identifier of the updated task.
    TaskId task_id = 1;

    // The change of the task priority.
    PriorityChange priority_change = 2 [(required) = true];

    // Reserved for future extension.
    //
    // For instance, to mark the start and end positions of the text changed (useful for
    // huge task descriptions).
    reserved 3 to 10;
}

// An event fired upon a task due date update.
//
// The task referenced by the event may be either in a finalized or in a draft state.
//
message TaskDueDateUpdated {

    // An identifier of the updated task.
    TaskId task_id = 1;

    // The task due date change.
    change.TimestampChange due_date_change = 2 [(required) = true];

    // Reserved for future extension.
    reserved 4 to 10;
}

// An event fired upon task draft finalization.
//
// The task referenced by the event is always finalized.
//
message TaskDraftFinalized {

    // An identifier of the task draft finalized.
    TaskId task_id = 1;

    // Reserved for future extension.
    reserved 2 to 10;
}

// An event fired upon task completion.
//
// The task referenced by the event is always completed.
//
message TaskCompleted {

    // An identifier of the completed task.
    TaskId task_id = 1;

    // Reserved for future extension.
    reserved 2 to 10;
}

// An event fired upon task reopening.
//
// The task referenced by the event is always finalized and incomplete.
//
message TaskReopened {

    // An identifier of the reopened task.
    TaskId task_id = 1;

    // Reserved for future extension.
    reserved 2 to 10;
}

// An event fired upon task deletion.
//
// The task referenced by the event is always deleted.
//
message TaskDeleted {

    // An identifier of the deleted task.
    TaskId task_id = 1;

    // Reserved for future extension.
    reserved 2 to 10;
}

// An event fired upon the label assignment to a task.
//
message LabelAssignedToTask {

    // An identifier of the target task.
    TaskId task_id = 1;

    // An identifier of the label to assign to the target task.
    LabelId label_id = 2 [(required) = true];

    // Reserved for future extension.
    reserved 3 to 10;
}

// An event fired upon the label removal from a task.
//
message LabelRemovedFromTask {

    // An identifier of the target task.
    TaskId task_id = 1;

    // An identifier of the label to remove from the target task.
    LabelId label_id = 2 [(required) = true];

    // Reserved for future extension.
    reserved 3 to 10;
}

// An event fired upon a deleted task restoration.
//
// The task referenced by the event is always non-deleted.
//
message DeletedTaskRestored {

    // An identifier of the restored task.
    TaskId task_id = 1;

    // Reserved for future extension.
    reserved 2 to 10;
}

// An event reflecting the label creation.
//
message LabelCreated {

    // An identifier of the created label.
    LabelId id = 1;

    // The details of the label created.
    LabelDetails details = 2 [(required) = true];
}

// An event reflecting the label update.
//
message LabelDetailsUpdated {

    // An identifier of the updated label.
    LabelId label_id = 1;

    // The label details change.
    LabelDetailsChange label_details_change = 2 [(required) = true];
}

message LabelledTaskRestored {

    // A label idenifier.
    LabelId label_id = 1;

    // A task idenifier.
    TaskId task_id = 2;
}
