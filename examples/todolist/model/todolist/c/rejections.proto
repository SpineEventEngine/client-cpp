//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.examples.todolist;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.examples.todolist";
option java_package = "io.spine.examples.todolist.c.rejection";
option java_multiple_files = false;
option java_generate_equals_and_hash = true;


import "todolist/identifiers.proto";
import "todolist/values.proto";
import "todolist/model.proto";

// The rejection to update a task description.
//
// It is thrown if an attempt is made to update the task in either DELETED or COMPLETED state.
message CannotUpdateTaskDescription {

    // Details of the rejection.
    DescriptionUpdateRejected rejection_details = 1;
}

// The rejection to update a task priority.
//
// It is thrown if an attempt is made to update the task in either DELETED or COMPLETED state.
message CannotUpdateTaskPriority {

    // Details of the rejection.
    PriorityUpdateRejected rejection_details = 1;
}

// The rejection to update a task due date.
//
// It is thrown if an attempt is made to update the task in either DELETED or COMPLETED state.
message CannotUpdateTaskDueDate {

    // Details of the rejection.
    TaskDueDateUpdateRejected rejection_details = 1;
}

// The rejection to update a label details.
//
// It is thrown if an attempt is made to update the label when
// the expected label details do not match the actual.
message CannotUpdateLabelDetails {

    // Details of the rejection.
    LabelDetailsUpdateRejected rejection_details = 1;
}

// The rejection to assign label to task.
//
// It is thrown if an attempt is made to assign the label
// to the task in either DELETED or COMPLETED state.
message CannotAssignLabelToTask {

    // Details of the rejection.
    AssignLabelToTaskRejected rejection_details = 1;
}

// The rejection to remove label from task.
//
// It is thrown if an attempt is made to remove the label
// from the task in either DELETED or COMPLETED state.
message CannotRemoveLabelFromTask {

    // Details of the rejection.
    RemoveLabelFromTaskRejected rejection_details = 1;
}

// The rejection to reopen a task.
//
// It is thrown if an attempt is made to reopen the task when task is not COMPLETED.
message CannotReopenTask {

    // Details of the rejection.
    ReopenTaskRejected rejection_details = 1;
}

// The rejection to delete a task.
//
// It is thrown if an attempt is made to delete the task
// when task in either DELETED or COMPLETED state.
message CannotDeleteTask {

    // Details of the rejection.
    DeleteTaskRejected rejection_details = 1;
}

// The rejection to restore a task.
//
// It is thrown if an attempt is made to restore the task when task is not DELETED.
message CannotRestoreDeletedTask {

    // Details of the rejection.
    RestoreDeletedTaskRejected rejection_details = 1;
}

// The rejection to complete a task.
//
// It is thrown if an attempt is made to complete the task when task is not FINALIZED.
message CannotCompleteTask {

    // Details of the rejection.
    CompleteTaskRejected rejection_details = 1;
}

// The rejection to create a task draft.
//
// It is thrown if an attempt is made to create the task draft when task is already has a state.
message CannotCreateDraft {

    // Details of the rejection.
    CreateDraftRejected rejection_details = 1;
}

// The rejection to finalize a draft.
//
// It is thrown if an attempt is made to finalize the task when task is not DRAFT.
message CannotFinalizeDraft {

    // Details of the rejection.
    FinalizeDraftRejected rejection_details = 1;
}

// The rejection to move the `TaskCreation` process to a certain stage.
//
// The accepted stage transitions of a task creation process are limited.
// See `TaskCreationProcessManager` for more details.
message CannotMoveToStage {

    // The ID of the process which throwed the rejection.
    TaskCreationId process_id = 1 [(required) = true];

    // The stage which the process was requested to move in.
    TaskCreation.Stage requested_stage = 2 [(required) = true];

    // The current stage of the process.
    TaskCreation.Stage current_stage = 3 [(required) = true];
}
